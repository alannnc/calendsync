// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  credentials   Credential[]
  calendarSyncTasks CalendarSyncTask[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Credential {
    id          String    @id @default(cuid())
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    type        String
    providerId  String
    token       String?
    refreshToken String?
    expiresAt   DateTime?
    externalId  String
    calendars Calendar[]

    sourceCredentials CalendarSyncTask[] @relation(name: "sourceCredential")
    toCredentials CalendarSyncTask[]     @relation(name: "toCredential")
    eventsSynced EventSynced[]           @relation(name: "eventsSynced")
    notifications Notification[]         @relation(name: "notifications")

    @@unique([userId, type, providerId, externalId])
}

model Calendar {
  id        String    @id @default(cuid())
  name        String
  provider Provider @relation(fields: [providerId], references: [id])
  providerId  String
  credential   Credential   @relation(fields: [credentialId], references: [id])
  credentialId String
  externalId  String
  timeZone    String?
  accessRole  String?
  backgroundColor String?
  foregroundColor String?
  selected    Boolean?
  primary     Boolean?
  kind        String?
  etag        String?
  colorId     String?
}

model Provider {
  id        String    @id @default(cuid())
  name      String

  calendars Calendar[]
}

enum PrivacyCalendarSyncTaskEnum {
  Personal @map("personal")
  Busy     @map("busy")
  Partial  @map("partial")
}

enum AllDayEventConfigEnum {
  NoAllDay @map("no-all-day")
  Busy     @map("busy-only")
  All      @map("all")
}

model CalendarSyncTask {
  id                 String                      @id @default(cuid())
  userId             String
  user               User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  sourceCredentialId String
  sourceCredential   Credential?                 @relation(name: "sourceCredential", fields: [sourceCredentialId], references: [id], onDelete: Cascade)
  sourceExternalId   String
  toCredentialId     String
  toCredential       Credential?                 @relation(name: "toCredential", fields: [toCredentialId], references: [id], onDelete: Cascade)
  toExternalId       String
  color              String?
  privacy            PrivacyCalendarSyncTaskEnum
  allDayEventConfig  AllDayEventConfigEnum
  enabled            Boolean                     @default(true)
  notifications      Notification[]              @relation(name: "notifications")


  @@unique([sourceCredentialId, toCredentialId])
}

model EventSynced {
  id                    String       @id @default(cuid())
  eventUid              String
  eventId               String
  credentialId          String
  credential            Credential?  @relation(name: "eventsSynced", fields: [credentialId], references: [id], onDelete: NoAction)
  originEventUid        String
  originEventId         String
  originStart           DateTime
  originStartTimezone   String
  originEnd             DateTime
  originEndTimezone     String
  originRaw             Json?

  @@index([eventId])
  @@index([credentialId])
  @@index([originEventId])
}

model Notification {
  id                  String     @id @default(cuid())
  watchUuid           String     @default(cuid())
  type                String
  address             String
  resourceId          String?
  token               String?
  expiration          DateTime?
  calendarSyncTaskId  String
  calendarSyncTask    CalendarSyncTask @relation(name: "notifications", fields: [calendarSyncTaskId], references: [id], onDelete: Cascade)
  credentialId        String     
  credential          Credential @relation(name: "notifications", fields: [credentialId], references: [id], onDelete: NoAction)

  @@index([credentialId, expiration])
  @@index([watchUuid, expiration])
}
